extern char *malloc(), *realloc();

# line 2 "shell/parser.y"

/*************************************************************************
 *									 *
 *   Original : MEL         Stanford University        Sept, 1984	 *
 *									 *
 *     Copyright c 1984 The board of trustees of the Leland Stanford 	 *
 *                      Junior University. All rights reserved.		 *
 *     This subroutine may not be used outside of the SUPREM4 computer	 *
 *     program without the prior written consent of Stanford University. *
 *									 *
 *     Copyright c 1991 The board of regents of the University of 	 *
 *                      Florida.  All rights reserved.			 *
 *     This subroutine may not be used outside of the SUPREM4 computer	 *
 *     program without the prior written consent of the University of 	 *
 *     Florida.								 *
 *									 *
 *									 *
 *************************************************************************/
/*   parser.y                Version 5.1     */
/*   Last Modification : 7/3/91 08:28:19 */

/************************************************************************
 *									*
 *	yyparse - this yacc file specifies the grammer used in the 	*
 *  parser.  The return value is -1 for end of input, 2 for continue    *
 *  with a prompt, and 0 for continue with no prompt.			*
 *									*
 ************************************************************************/

#include <stdio.h>
#include <ctype.h>
#include "sysdep.h"
extern int errno;

static char *tp[10];
static int te[10];

#ifdef MEMDEB
#define malloc MALLOC
#endif

#include "shell.h"

#define YYRETURN(A)        { free(yys); free(yyv); return(A); }


# line 53 "shell/parser.y"
typedef union   {
    int ival;
    char *sval;
    } YYSTYPE;
# define PARAMETER 257
# define COMMAND 258
# define NAME 259
# define LIST 260
# define SOURCE 261
# define EOL 262
# define ENDFILE 263
# define QUIT 264
# define BACK 265
# define REDIRECT 266
# define BANG 267
# define HELP 268
# define BG_GRP 269
# define END_GRP 270
# define DELIMIT 271
# define DEFINE 272
# define COMMENT 273
# define UNDEF 274
# define SET 275
# define UNSET 276
# define FOR 277
# define END 278
# define CHDIR 279
#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0
extern int yychar;
extern int yyerrflag;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
YYSTYPE yylval, yyval;
# define YYERRCODE 256

# line 496 "shell/parser.y"



int yyexca[] ={
-1, 1,
	0, -1,
	-2, 0,
	};
# define YYNPROD 30
# define YYLAST 136
int yyact[]={

    17,    18,     2,    38,    19,     3,    18,    15,    16,    19,
    20,     7,     4,     9,    44,    20,     6,    10,     5,    11,
    12,     8,    61,    13,    17,    35,     2,    52,    28,     3,
    18,    15,    16,    19,    36,     7,     4,     9,    57,    20,
     6,    10,     5,    11,    12,     8,    17,    13,     2,    22,
    14,     3,    18,    15,    16,    19,    60,     7,     4,     9,
    45,    20,     6,    10,     5,    11,    12,     8,    34,    13,
    29,    37,     0,    46,     1,     0,    41,    42,     0,     0,
     0,    47,    48,    49,    50,     0,     0,     0,    51,     0,
    53,    54,     0,     0,    55,    39,    40,    21,     0,    43,
     0,    23,    24,    25,    26,    27,     0,     0,    30,    31,
    32,    33,     0,    64,     0,    56,    66,    59,    63,    58,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    62,    58,     0,    65 };
int yypact[]={

  -210, -1000,  -208,  -208,  -208,  -208,  -208,  -208,  -231, -1000,
  -208,  -208,  -208,  -208, -1000, -1000, -1000,  -261, -1000,  -237,
 -1000,  -263, -1000,  -263,  -263,  -261,  -261,  -263,  -246,  -210,
  -261,  -261,  -261,  -261, -1000, -1000, -1000,  -261,  -230,  -261,
  -261, -1000, -1000,  -261, -1000,  -232, -1000, -1000, -1000, -1000,
 -1000, -1000, -1000, -1000, -1000, -1000,  -210, -1000, -1000,  -256,
  -263, -1000,  -261,  -263, -1000,  -261, -1000 };
int yypgo[]={

     0,    73,    50,    71,    97,    56,    70,    60 };
int yyr1[]={

     0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     7,     7,     2,
     2,     2,     2,     3,     3,     3,     4,     4,     6,     5 };
int yyr2[]={

     0,     9,     9,     9,     7,     7,     9,    19,    15,     7,
     7,     7,     7,     3,     3,     3,     5,     4,     2,     3,
     5,     3,     5,     3,     5,     1,     3,     1,     1,     1 };
int yychk[]={

 -1000,    -1,   258,   261,   268,   274,   272,   267,   277,   269,
   273,   275,   276,   279,    -2,   263,   264,   256,   262,   265,
   271,    -4,   257,    -4,    -4,    -4,    -4,    -4,   259,    -6,
    -4,    -4,    -4,    -4,    -2,   262,   271,    -3,   266,    -3,
    -3,    -2,    -2,    -3,   260,    -7,    -1,    -2,    -2,    -2,
    -2,    -2,   257,    -2,    -2,    -2,    -6,   270,    -1,    -7,
    -5,   278,    -3,    -5,    -2,    -3,    -2 };
int yydef[]={

     0,    -2,    27,    27,    27,    27,    27,    27,     0,    28,
    27,    27,    27,    27,    13,    14,    15,     0,    19,     0,
    21,    25,    26,    25,    25,     0,     0,    25,     0,     0,
     0,     0,     0,     0,    16,    20,    22,     0,    23,     0,
     0,     4,     5,     0,    28,     0,    18,     9,    10,    11,
    12,     1,    24,     2,     3,     6,     0,    29,    17,     0,
    25,    29,     0,    25,     8,     0,     7 };
typedef struct { char *t_name; int t_val; } yytoktype;
#ifndef YYDEBUG
#	define YYDEBUG	0	/* don't allow debugging */
#endif

#if YYDEBUG

yytoktype yytoks[] =
{
	"PARAMETER",	257,
	"COMMAND",	258,
	"NAME",	259,
	"LIST",	260,
	"SOURCE",	261,
	"EOL",	262,
	"ENDFILE",	263,
	"QUIT",	264,
	"BACK",	265,
	"REDIRECT",	266,
	"BANG",	267,
	"HELP",	268,
	"BG_GRP",	269,
	"END_GRP",	270,
	"DELIMIT",	271,
	"DEFINE",	272,
	"COMMENT",	273,
	"UNDEF",	274,
	"SET",	275,
	"UNSET",	276,
	"FOR",	277,
	"END",	278,
	"CHDIR",	279,
	"-unknown-",	-1	/* ends search */
};

char * yyreds[] =
{
	"-no such reduction-",
	"line : COMMAND parameter rdir endline",
	"line : SOURCE parameter rdir endline",
	"line : HELP parameter rdir endline",
	"line : UNDEF parameter endline",
	"line : DEFINE parameter endline",
	"line : BANG parameter rdir endline",
	"line : FOR NAME LIST act1 commands END act2 rdir endline",
	"line : BG_GRP act1 commands END_GRP act2 rdir endline",
	"line : COMMENT parameter endline",
	"line : SET parameter endline",
	"line : UNSET parameter endline",
	"line : CHDIR parameter endline",
	"line : endline",
	"line : ENDFILE",
	"line : QUIT",
	"line : error endline",
	"commands : commands line",
	"commands : line",
	"endline : EOL",
	"endline : BACK EOL",
	"endline : DELIMIT",
	"endline : BACK DELIMIT",
	"rdir : REDIRECT",
	"rdir : REDIRECT PARAMETER",
	"rdir : /* empty */",
	"parameter : PARAMETER",
	"parameter : /* empty */",
	"act1 : /* empty */",
	"act2 : /* empty */",
};
#endif /* YYDEBUG */
#line 1 "/usr/lib/yaccpar"
/*	@(#)yaccpar 1.10 89/04/04 SMI; from S5R3 1.10	*/

/*
** Skeleton parser driver for yacc output
*/

/*
** yacc user known macros and defines
*/
#define YYERROR		goto yyerrlab
#define YYACCEPT	{ free(yys); free(yyv); return(0); }
#define YYABORT		{ free(yys); free(yyv); return(1); }
#define YYBACKUP( newtoken, newvalue )\
{\
	if ( yychar >= 0 || ( yyr2[ yytmp ] >> 1 ) != 1 )\
	{\
		yyerror( "syntax error - cannot backup" );\
		goto yyerrlab;\
	}\
	yychar = newtoken;\
	yystate = *yyps;\
	yylval = newvalue;\
	goto yynewstate;\
}
#define YYRECOVERING()	(!!yyerrflag)
#ifndef YYDEBUG
#	define YYDEBUG	1	/* make debugging available */
#endif

/*
** user known globals
*/
int yydebug;			/* set to 1 to get debugging */

/*
** driver internal defines
*/
#define YYFLAG		(-1000)

/*
** static variables used by the parser
*/
static YYSTYPE *yyv;			/* value stack */
static int *yys;			/* state stack */

static YYSTYPE *yypv;			/* top of value stack */
static int *yyps;			/* top of state stack */

static int yystate;			/* current state */
static int yytmp;			/* extra var (lasts between blocks) */

int yynerrs;			/* number of errors */

int yyerrflag;			/* error recovery flag */
int yychar;			/* current input token number */


/*
** yyparse - return 0 if worked, 1 if syntax error not recovered from
*/
int
yyparse()
{
	register YYSTYPE *yypvt;	/* top of value stack for $vars */
	unsigned yymaxdepth = YYMAXDEPTH;

	/*
	** Initialize externals - yyparse may be called more than once
	*/
	yyv = (YYSTYPE*)malloc(yymaxdepth*sizeof(YYSTYPE));
	yys = (int*)malloc(yymaxdepth*sizeof(int));
	if (!yyv || !yys)
	{
		yyerror( "out of memory" );
		return(1);
	}
	yypv = &yyv[-1];
	yyps = &yys[-1];
	yystate = 0;
	yytmp = 0;
	yynerrs = 0;
	yyerrflag = 0;
	yychar = -1;

	goto yystack;
	{
		register YYSTYPE *yy_pv;	/* top of value stack */
		register int *yy_ps;		/* top of state stack */
		register int yy_state;		/* current state */
		register int  yy_n;		/* internal state number info */

		/*
		** get globals into registers.
		** branch to here only if YYBACKUP was called.
		*/
	yynewstate:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;
		goto yy_newstate;

		/*
		** get globals into registers.
		** either we just started, or we just finished a reduction
		*/
	yystack:
		yy_pv = yypv;
		yy_ps = yyps;
		yy_state = yystate;

		/*
		** top of for (;;) loop while no reductions done
		*/
	yy_stack:
		/*
		** put a state and value onto the stacks
		*/
#if YYDEBUG
		/*
		** if debugging, look up token value in list of value vs.
		** name pairs.  0 and negative (-1) are special values.
		** Note: linear search is used since time is not a real
		** consideration while debugging.
		*/
		if ( yydebug )
		{
			register int yy_i;

			(void)printf( "State %d, token ", yy_state );
			if ( yychar == 0 )
				(void)printf( "end-of-file\n" );
			else if ( yychar < 0 )
				(void)printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				(void)printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ++yy_ps >= &yys[ yymaxdepth ] )	/* room on stack? */
		{
			/*
			** reallocate and recover.  Note that pointers
			** have to be reset, or bad things will happen
			*/
			int yyps_index = (yy_ps - yys);
			int yypv_index = (yy_pv - yyv);
			int yypvt_index = (yypvt - yyv);
			yymaxdepth += YYMAXDEPTH;
			yyv = (YYSTYPE*)realloc((char*)yyv,
				yymaxdepth * sizeof(YYSTYPE));
			yys = (int*)realloc((char*)yys,
				yymaxdepth * sizeof(int));
			if (!yyv || !yys)
			{
				yyerror( "yacc stack overflow" );
				return(1);
			}
			yy_ps = yys + yyps_index;
			yy_pv = yyv + yypv_index;
			yypvt = yyv + yypvt_index;
		}
		*yy_ps = yy_state;
		*++yy_pv = yyval;

		/*
		** we have a new state - find out what to do
		*/
	yy_newstate:
		if ( ( yy_n = yypact[ yy_state ] ) <= YYFLAG )
			goto yydefault;		/* simple state */
#if YYDEBUG
		/*
		** if debugging, need to mark whether new token grabbed
		*/
		yytmp = yychar < 0;
#endif
		if ( ( yychar < 0 ) && ( ( yychar = yylex() ) < 0 ) )
			yychar = 0;		/* reached EOF */
#if YYDEBUG
		if ( yydebug && yytmp )
		{
			register int yy_i;

			(void)printf( "Received token " );
			if ( yychar == 0 )
				(void)printf( "end-of-file\n" );
			else if ( yychar < 0 )
				(void)printf( "-none-\n" );
			else
			{
				for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
					yy_i++ )
				{
					if ( yytoks[yy_i].t_val == yychar )
						break;
				}
				(void)printf( "%s\n", yytoks[yy_i].t_name );
			}
		}
#endif /* YYDEBUG */
		if ( ( ( yy_n += yychar ) < 0 ) || ( yy_n >= YYLAST ) )
			goto yydefault;
		if ( yychk[ yy_n = yyact[ yy_n ] ] == yychar )	/*valid shift*/
		{
			yychar = -1;
			yyval = yylval;
			yy_state = yy_n;
			if ( yyerrflag > 0 )
				yyerrflag--;
			goto yy_stack;
		}

	yydefault:
		if ( ( yy_n = yydef[ yy_state ] ) == -2 )
		{
#if YYDEBUG
			yytmp = yychar < 0;
#endif
			if ( ( yychar < 0 ) && ( ( yychar = yylex() ) < 0 ) )
				yychar = 0;		/* reached EOF */
#if YYDEBUG
			if ( yydebug && yytmp )
			{
				register int yy_i;

				(void)printf( "Received token " );
				if ( yychar == 0 )
					(void)printf( "end-of-file\n" );
				else if ( yychar < 0 )
					(void)printf( "-none-\n" );
				else
				{
					for ( yy_i = 0;
						yytoks[yy_i].t_val >= 0;
						yy_i++ )
					{
						if ( yytoks[yy_i].t_val
							== yychar )
						{
							break;
						}
					}
					(void)printf( "%s\n", yytoks[yy_i].t_name );
				}
			}
#endif /* YYDEBUG */
			/*
			** look through exception table
			*/
			{
				register int *yyxi = yyexca;

				while ( ( *yyxi != -1 ) ||
					( yyxi[1] != yy_state ) )
				{
					yyxi += 2;
				}
				while ( ( *(yyxi += 2) >= 0 ) &&
					( *yyxi != yychar ) )
					;
				if ( ( yy_n = yyxi[1] ) < 0 )
					YYACCEPT;
			}
		}

		/*
		** check for syntax error
		*/
		if ( yy_n == 0 )	/* have an error */
		{
			/* no worry about speed here! */
			switch ( yyerrflag )
			{
			case 0:		/* new error */
				yyerror( "syntax error" );
				goto skip_init;
			yyerrlab:
				/*
				** get globals into registers.
				** we have a user generated syntax type error
				*/
				yy_pv = yypv;
				yy_ps = yyps;
				yy_state = yystate;
				yynerrs++;
			skip_init:
			case 1:
			case 2:		/* incompletely recovered error */
					/* try again... */
				yyerrflag = 3;
				/*
				** find state where "error" is a legal
				** shift action
				*/
				while ( yy_ps >= yys )
				{
					yy_n = yypact[ *yy_ps ] + YYERRCODE;
					if ( yy_n >= 0 && yy_n < YYLAST &&
						yychk[yyact[yy_n]] == YYERRCODE)					{
						/*
						** simulate shift of "error"
						*/
						yy_state = yyact[ yy_n ];
						goto yy_stack;
					}
					/*
					** current state has no shift on
					** "error", pop stack
					*/
#if YYDEBUG
#	define _POP_ "Error recovery pops state %d, uncovers state %d\n"
					if ( yydebug )
						(void)printf( _POP_, *yy_ps,
							yy_ps[-1] );
#	undef _POP_
#endif
					yy_ps--;
					yy_pv--;
				}
				/*
				** there is no state on stack with "error" as
				** a valid shift.  give up.
				*/
				YYABORT;
			case 3:		/* no shift yet; eat a token */
#if YYDEBUG
				/*
				** if debugging, look up token in list of
				** pairs.  0 and negative shouldn't occur,
				** but since timing doesn't matter when
				** debugging, it doesn't hurt to leave the
				** tests here.
				*/
				if ( yydebug )
				{
					register int yy_i;

					(void)printf( "Error recovery discards " );
					if ( yychar == 0 )
						(void)printf( "token end-of-file\n" );
					else if ( yychar < 0 )
						(void)printf( "token -none-\n" );
					else
					{
						for ( yy_i = 0;
							yytoks[yy_i].t_val >= 0;
							yy_i++ )
						{
							if ( yytoks[yy_i].t_val
								== yychar )
							{
								break;
							}
						}
						(void)printf( "token %s\n",
							yytoks[yy_i].t_name );
					}
				}
#endif /* YYDEBUG */
				if ( yychar == 0 )	/* reached EOF. quit */
					YYABORT;
				yychar = -1;
				goto yy_newstate;
			}
		}/* end if ( yy_n == 0 ) */
		/*
		** reduction by production yy_n
		** put stack tops, etc. so things right after switch
		*/
#if YYDEBUG
		/*
		** if debugging, print the string that is the user's
		** specification of the reduction which is just about
		** to be done.
		*/
		if ( yydebug )
			(void)printf( "Reduce by (%d) \"%s\"\n",
				yy_n, yyreds[ yy_n ] );
#endif
		yytmp = yy_n;			/* value to switch over */
		yypvt = yy_pv;			/* $vars top of value stack */
		/*
		** Look in goto table for next state
		** Sorry about using yy_state here as temporary
		** register variable, but why not, if it works...
		** If yyr2[ yy_n ] doesn't have the low order bit
		** set, then there is no action to be done for
		** this reduction.  So, no saving & unsaving of
		** registers done.  The only difference between the
		** code just after the if and the body of the if is
		** the goto yy_stack in the body.  This way the test
		** can be made before the choice of what to do is needed.
		*/
		{
			/* length of production doubled with extra bit */
			register int yy_len = yyr2[ yy_n ];

			if ( !( yy_len & 01 ) )
			{
				yy_len >>= 1;
				yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
				yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
					*( yy_ps -= yy_len ) + 1;
				if ( yy_state >= YYLAST ||
					yychk[ yy_state =
					yyact[ yy_state ] ] != -yy_n )
				{
					yy_state = yyact[ yypgo[ yy_n ] ];
				}
				goto yy_stack;
			}
			yy_len >>= 1;
			yyval = ( yy_pv -= yy_len )[1];	/* $$ = $1 */
			yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
				*( yy_ps -= yy_len ) + 1;
			if ( yy_state >= YYLAST ||
				yychk[ yy_state = yyact[ yy_state ] ] != -yy_n )
			{
				yy_state = yyact[ yypgo[ yy_n ] ];
			}
		}
					/* save until reenter driver code */
		yystate = yy_state;
		yyps = yy_ps;
		yypv = yy_pv;
	}
	/*
	** code supplied by user is placed in this switch
	*/
	switch( yytmp )
	{
		
case 1:
# line 71 "shell/parser.y"
{
	    char *cmd = yypvt[-3].sval, *par = yypvt[-2].sval, *red = yypvt[-1].sval;
	    int back = yypvt[-0].ival;

	    do_echo();

	    /*do no take the action if storing*/
	    if (depth == -1) {
		/*call the command setup routine*/
		if ((par == NULL) || (interactive))
		    do_command(cmd, par, TRUE, red, (back & BACKGROUND) ); 
		else
		    do_command(cmd, par, FALSE, red, (back & BACKGROUND) ); 
		}

	    /*free the used malloc space*/
	    free(cmd);
	    if (par != NULL) free(par);
	    if (red != NULL) free(red);

	    if (depth == -1) {
		YYRETURN( back & PROMPT );
	    }
	} break;
case 2:
# line 96 "shell/parser.y"
{
	    char *par = yypvt[-2].sval, *red = yypvt[-1].sval;
	    int back = yypvt[-0].ival;

	    do_echo();

	    /*do not take the action if storing*/
	    if (depth == -1) {
		do_source(par, red, ( back & BACKGROUND), TRUE );

	        if ( (back & PROMPT) && (back & BACKGROUND) ) {
		    YYRETURN( PROMPT );
		}
		else {
		    YYRETURN( ~ PROMPT );
		}
	    }
	} break;
case 3:
# line 115 "shell/parser.y"
{
	    char *par = yypvt[-2].sval, *red = yypvt[-1].sval;
	    int back = yypvt[-0].ival;

	    FILE tout, *t1;
	    do_echo();

	    /*do the redirection if necessary*/
	    tout = *stdout;
	    if (red != NULL)  {
		t1 = file_parse(red, "a");
		*stdout = *t1;
	    }

	    help( par );

	    if (red != NULL) {
		fclose(stdout);
		*stdout = tout;
	    }

	    /*free the space*/
	    if (par != NULL) free(par);
	    if (red != NULL) free(red);

	    if (depth == -1) YYRETURN( back & PROMPT );
	} break;
case 4:
# line 143 "shell/parser.y"
{
	    char *par = yypvt[-1].sval;
	    int back = yypvt[-0].ival;

	    do_echo();

	    /*do no take the action if storing*/
	    if (depth == -1) {
		/*do the undefintion*/
		if (par != NULL)
		    if ( undef_macro(par, &macro) == -1)
			fprintf(stderr, "can not find macro %s\n", par);
		}
	    if (par != NULL) free(par);
	    if (depth == -1)
		YYRETURN( back & PROMPT );
	} break;
case 5:
# line 161 "shell/parser.y"
{
	    char *par = yypvt[-1].sval;
	    int back = yypvt[-0].ival;

	    do_echo();

	    /*do no take the action if storing*/
	    if (depth == -1) {
		/*handle the definitions and results*/
		if (par == NULL)
		    dump_macro(macro);
		else
		    define_macro(par, &macro);
		}

	    if (par != NULL) free(par);
	    if (depth == -1)
		YYRETURN( back & PROMPT );
	} break;
case 6:
# line 181 "shell/parser.y"
{
	    char *par = yypvt[-2].sval, *red = yypvt[-1].sval;
	    int back = yypvt[-0].ival;
	    char str[160];
	    int status, pid, w;
		    
	    do_echo();

	    str[0] = '\0';

	    /*do no take the action if storing*/
	    if (depth == -1) {
		/*if no command give a shell*/
		if (par == NULL)
		    strcpy(str, "csh");
		else {
		    strcpy(str, par);
		    free(par);
		    }
		    
		/*if a redirect add that on*/
		if (red != NULL) {
		    strcat(str, red);
		    free(red);
		    }
		    
		/*add background on*/
		if (back & BACKGROUND)
		    strcat(str, " & ");

		/*exec a shell to handle the request*/
		if ((pid = vfork()) == 0) {
		    if (execl("/bin/sh", "sh", "-c", str, 0) == -1)
			printf("error number %d\n", errno);
		    _exit(127);
		}

		/*wait for the process to finish*/
		while ((w = wait(&status)) != pid && w != -1);

	    }
	    if (depth == -1)
		YYRETURN( PROMPT );
	} break;
case 7:
# line 226 "shell/parser.y"
{
	    char *body;
	    char *list;
	    char *name;
	    char *rdir;
	    char *value;
	    char str[160];
	    int endline;
	    int i;
	    extern char *list_parse();

	    echo_bufptr = 0;

	    prompt = tp[depth];
	    echoall = te[depth];
	    depth--;
	    if ( depth == -1 ) {
		/*we need to save the names, because parsing will
		  destroy the current set*/
		body = yypvt[-2].sval;
		list = yypvt[-6].sval;
		name = yypvt[-7].sval;
		rdir = yypvt[-1].sval;
		endline = yypvt[-0].ival;

		/*strip the "end" off*/
		for(i = strlen(body)-1; body[i] != 'e'; i--);
		body[i] = '\0';

		for( value = list_parse( &list, TRUE ); value != NULL;
		     value = list_parse( &list, FALSE) ) {
		    /*basic plan is to use macro processor to define strings*/
		    strcpy(str, name);
		    strcat(str, " ");
		    strcat(str, value);
		    free(value);
		    define_macro(str, &macro);

		    do_string( body, rdir, ( endline & BACKGROUND ) );
		}


		/*remove the entry from the macro table*/
		(void)undef_macro(name, &macro);
		
		if (body != NULL) free(body);
		if (list != NULL) free(list);
		if (name != NULL) free(name);
		if (rdir != NULL) free(rdir);

		if ( (endline & PROMPT) || (endline & BACKGROUND) ) {
		    YYRETURN( PROMPT );
		}
		else {
		    YYRETURN( ~ PROMPT );
		}
	    }
	} break;
case 8:
# line 285 "shell/parser.y"
{
	    char *body = yypvt[-2].sval, *red = yypvt[-1].sval;
	    int back = yypvt[-0].ival;
	    char *s;
	    int i;

	    echo_bufptr = 0;

	    prompt = tp[depth];
	    echoall = te[depth];
	    depth--;
	    /*do no take the action if storing*/
	    if (depth == -1)  {
		s = body;		

		/*strip off the trailing }*/
		for(i = strlen(s)-1; s[i] != '}'; i--);
		s[i] = ';';

		do_string(body, red, ( back & BACKGROUND) );

		if (body != NULL) free(body);

		if ( (back & PROMPT) || (back & BACKGROUND) ) {
		    YYRETURN( PROMPT );
		}
		else {
		    YYRETURN( ~ PROMPT );
		}
	    }
	} break;
case 9:
# line 317 "shell/parser.y"
{
	    int back = yypvt[-0].ival;
	    do_echo();

	    if (depth == -1)
		YYRETURN( back & PROMPT );
	} break;
case 10:
# line 325 "shell/parser.y"
{
	    char *par = yypvt[-1].sval;
	    int back = yypvt[-0].ival;
	    do_echo();

	    /*do no take the action if storing*/
	    if (depth == -1) 
		do_set(par, TRUE);
	    /*free up the wasted space*/
	    if (par != NULL) free(par);
	    if (depth == -1)
		YYRETURN( back & PROMPT );
	} break;
case 11:
# line 339 "shell/parser.y"
{
	    char *par = yypvt[-1].sval;
	    int back = yypvt[-0].ival;
	    do_echo();

	    /*do no take the action if storing*/
	    if (depth == -1) 
		do_set(par, FALSE);
	    /*free up the wasted space*/
	    if (par != NULL) free(par);
	    if (depth == -1)
		YYRETURN( back & PROMPT );
	} break;
case 12:
# line 353 "shell/parser.y"
{
	    char *par = yypvt[-1].sval;
	    int back = yypvt[-0].ival;
	    char *s;

	    do_echo();

	    /*do not take the action if storing*/
	    if (depth == -1) {
		s = par;
		if ( s == NULL ) {
		    if (chdir( getenv("HOME") ))
			fprintf( stderr, "%s: No such file or directory\n", s);
		}
		else {
		    while ( isspace( *s ) ) s++;
		    if (chdir( s ))
			fprintf( stderr, "%s: No such file or directory\n", s);
		}
	    }
	    /*free up the wasted space*/
	    if (par != NULL)
		free(par);
	    if (depth == -1)
		YYRETURN( back & PROMPT );
	} break;
case 13:
# line 380 "shell/parser.y"
{
	    echo_bufptr = 0;

	    if (depth == -1)
		YYRETURN( yypvt[-0].ival );
	} break;
case 14:
# line 387 "shell/parser.y"
{
	    echo_bufptr = 0;

	    if (depth == -1)
		YYRETURN(-1);
	} break;
case 15:
# line 394 "shell/parser.y"
{
	    do_echo();

	    if (depth == -1)
		YYRETURN(-1);
	} break;
case 16:
# line 401 "shell/parser.y"
{
	    do_echo();

	    fprintf(stderr, "illegal input\n");
	    if (depth == -1)
		YYRETURN( yypvt[-0].ival & PROMPT );
	} break;
case 19:
# line 419 "shell/parser.y"
{  yyval.ival = ~BACKGROUND & PROMPT; } break;
case 20:
# line 421 "shell/parser.y"
{  yyval.ival = BACKGROUND | PROMPT; } break;
case 21:
# line 423 "shell/parser.y"
{  yyval.ival = 0; } break;
case 22:
# line 425 "shell/parser.y"
{  yyval.ival = BACKGROUND; } break;
case 23:
# line 430 "shell/parser.y"
{
	    fprintf(stderr, "no file for redirection!\n");
	    yyval.sval = NULL;
	} break;
case 24:
# line 435 "shell/parser.y"
{
	    yyval.sval = yypvt[-0].sval;
	} break;
case 25:
# line 439 "shell/parser.y"
{
	    yyval.sval = NULL;
	} break;
case 26:
# line 446 "shell/parser.y"
{
	    yyval.sval = yypvt[-0].sval;
	} break;
case 27:
# line 450 "shell/parser.y"
{
	    yyval.sval = NULL;
	} break;
case 28:
# line 459 "shell/parser.y"
{

	    /*increment the nesting depth for storage*/
	    depth++;

	    /*malloc off length if not done*/
	    if (store[depth] == NULL) {
		store_len[depth] = 1024;
		store[depth] = (char *)malloc(store_len[depth]);
		}
	    /*zero pointer*/
	    store_ptr[depth] = 0;

	    tp[depth] = prompt;
	    prompt = "> ";
	    te[depth] = echoall;
	    echoall = FALSE;

	} break;
case 29:
# line 483 "shell/parser.y"
{
	    char *s;

	    *( store[depth] + store_ptr[depth]) = '\0';

	    s = (char *)malloc( strlen( store[depth] ) + 1 );
	    strcpy(s, store[depth]);

	    yyval.sval = s; 
	} break;
	}
	goto yystack;		/* reset registers in driver code */
}
